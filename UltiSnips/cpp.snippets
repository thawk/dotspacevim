###########################################################################
#                           Global functions                              #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                               Snippets                                  #
###########################################################################
snippet try
try
{
	${VISUAL}${1}
}
catch (${2:...})
{
	${3}
}
endsnippet

snippet fori
for (${1:size_t} ${2:i}=${3:0}; $2 < ${4}; ++$2)
{
	${VISUAL}${0}
}
endsnippet

# range based for ( C++11 feature )
snippet fore
for (${1:auto} ${2:i} : ${3:container})
{
	${VISUAL}${4}
}
endsnippet

snippet namespace
namespace ${1:#:name}
{

${VISUAL}${0}

}   // namespace $1
endsnippet

snippet mfun
${4:void} ${1:`substitute(substitute(expand("%:t:r"), "^\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")`}::${2:MemberFunction}(${3})
{
	${VISUAL}${0}
}
endsnippet

snippet skel
#include <iostream>
using namespace std;

int main(int argc, char const* argv[])
{
	${0:cout << "hello, world!" << endl;}

	return 0;
}
endsnippet

snippet log
LOG_${1:INFO}(
	${2:kInfo},
	format(translate(${3}))
	% ${4},
	${5:""});

${0}
endsnippet

snippet fnc "Basic c++ doxygen function template" b
/**
 * @brief: ${4:brief}
 *
 * @param: `!p write_docstring_args(t[3],snip)`
 *
 * @return: `!p snip.rv = t[1]`
 */
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${0:FunctionBody}
}
endsnippet
