snippet cwd "Resolve current path and filename"
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
endsnippet

snippet tempdir
${1:tempdir}=$(mktemp -d)
trap "rm -rf '\$$1'" 0               # EXIT
trap "rm -rf '\$$1'; exit 1" 2       # INT
trap "rm -rf '\$$1'; exit 1" 1 15    # HUP TERM
$0
endsnippet

snippet #! "shebang"
#!/usr/bin/env bash

$0
endsnippet

snippet skel "Basic skel using getopt, not work in macOS"
#!/usr/bin/env bash

function EchoUsage()
{
	echo "
Usage: $(basename "\$0") [options] <module_id>

	Options:
		-h [ --help ]            show this screen
		-V [ --version ]         show program version
		-v [ --verbose=<level> ] Set log level. 0: trace, 1: debug, 2:info ...
" >&2
}

TEMP=$(getopt -o h,V,v:: --long help,version,verbose:: -- "$@")

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

# Note the quotes around $TEMP: they are essential!
eval set -- "$TEMP"

show_version=
args=

while true ; do
	case "\$1" in
		-h|--help)
			EchoUsage
			exit 1
			;;
		-V|--version)
			show_version=1
			shift 1
			break
			;;
		-v|--verbose)
			args="${args} --verbose \$2"
			shift 2
			;;
		--)
			shift 1
			break
			;;
		*) 
			echo "Unknown parameter '\$1'!"
			exit 1
			;;
	esac
done

# 参数个数最少为1
if [ $# -lt 1 ]
then
	EchoUsage
	exit 1
fi

module_id=\$1

# 显示版本
if [ ! -z "${show_version}" ]
then
	echo "Version"
	exit 0
fi
endsnippet

snippet skel "Basic skel using bash getopts, work for macOS, not support long option" b
#!/usr/bin/env bash

EchoUsage()
{
	echo "
Usage: $(basename "\$0") [options] [--]

	Options:
		-h|help       Display this message
		-v|verbose    Display more verbose log
		-t|test <val> A testing argument
" >&2
}

VERBOSE=
while getopts ":hVvt:" opt; do
	case $opt in
		h|help)
			EchoUsage
			exit 0
			;;
		v|verbose)
			VERBOSE="${VERBOSE}1"
			;;
		t|test)
			echo "Testing argument: '$OPTARG' at position $OPTIND"
			;;
		* )
			echo -e "\n  Option does not exist : '$OPTARG' at position $OPTIND\n"
			EchoUsage
			exit 1
			;;
	esac
done
shift $(($OPTIND-1))

# 参数个数最少为1
if [ $# -lt 1 ]
then
	EchoUsage
	exit 1
fi

$0
endsnippet

snippet ostype "case OSTYPE" b
case "$OSTYPE" in
	"darwin"*)
		: "MacOS"
	;;

	"linux"*)
		: "Linux"
	;;

	*"bsd"* | "dragonfly" | "bitrig")
		: "BSD"
	;;

	"cygwin" | "msys" | "win32")
		: "Windows"
	;;

	*)
		printf '%s\n' "Unknown OS detected, aborting..." >&2
		exit 1
	;;
esac

# Finally, set the variable.
os="$_"
endsnippet

snippet die "die function" b
die() {
    echo "\${1:-Exiting}" >&2
    exit "\${2:--1}"
}
endsnippet

snippet read "read from command into array" b
IFS=$'\n' read -r -d '' -a ${1:my_array} < <( ${2:command} && printf '\0' )
$0
endsnippet

snippet read "readarray from command into array" b
readarray -t ${1:my_array} < <( ${2:command} )
$0
endsnippet

snippet read "read from string into array" b
IFS=$'\n' read -r -d '' -a ${1:my_array} <<<${2:$string}
$0
endsnippet

snippet read "readarray from string into array" b
readarray -t ${1:my_array} <<<${2:$string}
$0
endsnippet

snippet heredoc "heredoc from string"
<< ${1:EOS}
${2:lines}
$1
$0
endsnippet

snippet heredoc "heredoc from string, disable special char"
<< '${1:EOS}'
${2:lines}
$1
$0
endsnippet

snippet heredoc "herestring"
<<< ${1:"string"}
endsnippet

snippet append "Append new_path to $PATH"
${1:PATH}=\$$1\${$1:+:${2:new_path}}
endsnippet

snippet prepend "Prepend new_path to $PATH"
${1:PATH}=\${$1:+${2:new_path}:}\$$1
endsnippet

snippet append "Append new_path to $PATH if not existed"
case ":\${${1:PATH}:-}:" in
    *:${2:new_path}:*) ;;
    *) $1="\${$1:+\$$1:}$2" ;;
esac
endsnippet

snippet prepend "Prepend new_path to $PATH if not existed"
case ":\${${1:PATH}:-}:" in
    *:${2:new_path}:*) ;;
    *) $1="$2\${$1:+:\$$1}" ;;
esac
endsnippet
