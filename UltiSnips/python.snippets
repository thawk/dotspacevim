snippet attr "attribute with sphinx docstring" b
#: ${3:type: TODO}
self.${1:attr} = ${2:$1}
${0}
endsnippet

snippet catch-keyboard "Catch KeyboardInterrupt" b
try:
	${VISUAL}${0}

except KeyboardInterrupt:
	pass

finally:
	pass
endsnippet

#! header
snippet #! "Shebang header for python scripts" b
#!/usr/bin/env python${1:}
# -*- coding: utf-8 -*-

$0
endsnippet

snippet modeline "VIM modeline for python scripts" b
# vim: set fileencoding=utf-8 tabstop=4 expandtab shiftwidth=4 softtabstop=4:
endsnippet

snippet context
import os
import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import ${1:sample}
endsnippet

snippet nulllogger "set null logger"
# Set default logging handler to avoid "No handler found" warnings.
import logging

logging.getLogger(__name__).addHandler(logging.NullHandler())

endsnippet

snippet logger "get logger for module"
logger = logging.getLogger(__name__)

endsnippet
    
snippet main "if __name__ == '__main__'" b
if __name__ == '__main__':
	$0
endsnippet

snippet "#\s*\.\.\." "# doctest:+ELLIPSIS" r
# doctest:+ELLIPSIS
endsnippet

snippet currdir "dir of script"
os.path.dirname(os.path.realpath(__file__))
endsnippet

snippet defi "def __init__" b
def __init__(self, ${1:args}):
	${2:super().__init__()}
endsnippet

snippet input "handle file input" b
import fileinput

for line in fileinput.input(encoding="utf-8"):
    process(line)
endsnippet
