# Boost.Test，必须放在unittest目录下，且与unittest同层有include目录
snippet ut "unittest skel" b
#include <boost/test/unit_test.hpp>
#include <boost/system/error_code.hpp>
#include <turtle/mock.hpp>
#include <`!v substitute(findfile(substitute(expand("%:t:r"), "^test_\\?", "", "") . ".h", substitute(expand("%:p"), "\\<unittest/.*", "include/**", ""), 1), ".*\\<include/", "", "")`>

using namespace `!v substitute(substitute(fnamemodify(substitute(findfile(substitute(expand("%:t:r"), "^test_\\?", "", "") . ".h", substitute(expand("%:p"), "\\<unittest/.*", "include/**", ""), 1), ".*\\<include/", "", ""), ":p:h"), "[.-]", "_", "g"), "/", "::", "g")`;
using boost::system::error_code;

BOOST_AUTO_TEST_SUITE(test_`!v substitute(expand("%:t:r"), "^test_\\?", "", "")`);

struct Fixture
{
	`!v substitute(substitute(expand("%:t:r"), "^test_\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")` ${1:`!v substitute(expand("%:t:r"), "^test_\\?", "", "")`};

	Fixture()
	: $1(${2})
	{
	}
};

${0}

BOOST_AUTO_TEST_SUITE_END()
endsnippet

# Boost.Test
snippet sut1 "unittest for sscc::*" b
#include <boost/test/unit_test.hpp>
#include <boost/system/error_code.hpp>
#include <turtle/mock.hpp>
#include "../src/`!v substitute(expand("%:t:r"), "^test_\\?", "", "")`.h"

using namespace sscc`!v substitute(substitute(substitute(substitute(expand("%:p:h"), "/unittest\\>", "", ""), "[.-]", "_", "g"), "^.*\\(\\(/[^/]\\+\\)\\{1}\\)$", "\\1", ""), "/", "::", "g")`;
using boost::system::error_code;

BOOST_AUTO_TEST_SUITE(test_`!v substitute(expand("%:t:r"), "^test_\\?", "", "")`);

struct Fixture
{
	`!v substitute(substitute(expand("%:t:r"), "^test_\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")` ${1:`!v substitute(expand("%:t:r"), "^test_\\?", "", "")`};

	Fixture()
	: $1(${2})
	{
	}
};

${0}

BOOST_AUTO_TEST_SUITE_END()
endsnippet

# Boost.Test
snippet sut2 "sscc::*::*" b
#include <boost/test/unit_test.hpp>
#include <boost/system/error_code.hpp>
#include <turtle/mock.hpp>
#include "../src/`!v substitute(expand("%:t:r"), "^test_\\?", "", "")`.h"

using namespace sscc`!v substitute(substitute(substitute(substitute(expand("%:p:h"), "/unittest\\>", "", ""), "[.-]", "_", "g"), "^.*\\(\\(/[^/]\\+\\)\\{2}\\)$", "\\1", ""), "/", "::", "g")`;
using boost::system::error_code;

BOOST_AUTO_TEST_SUITE(test_`!v substitute(expand("%:t:r"), "^test_\\?", "", "")`);

struct Fixture
{
	`!v substitute(substitute(expand("%:t:r"), "^test_\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")` ${1:`!v substitute(expand("%:t:r"), "^test_\\?", "", "")`};

	Fixture()
	: $1(${2})
	{
	}
};

${0}

BOOST_AUTO_TEST_SUITE_END()
endsnippet

# Boost.Test
snippet sut3 "sscc::*::*::*" b
#include <boost/test/unit_test.hpp>
#include <boost/system/error_code.hpp>
#include <turtle/mock.hpp>
#include "../src/`!v substitute(expand("%:t:r"), "^test_\\?", "", "")`.h"

using namespace sscc`!v substitute(substitute(substitute(substitute(expand("%:p:h"), "/unittest\\>", "", ""), "[.-]", "_", "g"), "^.*\\(\\(/[^/]\\+\\)\\{3}\\)$", "\\1", ""), "/", "::", "g")`;
using boost::system::error_code;

BOOST_AUTO_TEST_SUITE(test_`!v substitute(expand("%:t:r"), "^test_\\?", "", "")`);

struct Fixture
{
	`!v substitute(substitute(expand("%:t:r"), "^test_\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")` ${1:`!v substitute(expand("%:t:r"), "^test_\\?", "", "")`};

	Fixture()
	: $1(${2})
	{
	}
};

${0}

BOOST_AUTO_TEST_SUITE_END()
endsnippet

# Comment for Test Case
snippet tc "unittest for any class" b
/**
 * @class `!v substitute(substitute(fnamemodify(substitute(findfile(substitute(expand("%:t:r"), "^test_\\?", "", "") . ".h", substitute(expand("%:p"), "\\<unittest/.*", "include/**", ""), 1), ".*\\<include/", "", ""), ":p:h"), "[.-]", "_", "g"), "/", "::", "g")`::`!v substitute(substitute(expand("%:t:r"), "^test_\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")`
 * @test ${1}\n
 * <b>输入数据：</b> ${2}\n
 * <b>预期输出：</b> ${3}
 */
BOOST_FIXTURE_TEST_CASE(Test${4}, ${5:Fixture})
{
	${0}
}
endsnippet

snippet tc "data-driven unittest" b
/**
 * @class `!v substitute(substitute(fnamemodify(substitute(findfile(substitute(expand("%:t:r"), "^test_\\?", "", "") . ".h", substitute(expand("%:p"), "\\<unittest/.*", "include/**", ""), 1), ".*\\<include/", "", ""), ":p:h"), "[.-]", "_", "g"), "/", "::", "g")`::`!v substitute(substitute(expand("%:t:r"), "^test_\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")`
 * @test ${1}\n
 * <b>输入数据：</b> ${2}\n
 * <b>预期输出：</b> ${3}
 */
BOOST_DATA_TEST_CASE(Test${4}, ${5:dataset}, ${6:param})
{
	${0}
}
endsnippet

snippet tc "data-driven unittest with fixture" b
/**
 * @class `!v substitute(substitute(fnamemodify(substitute(findfile(substitute(expand("%:t:r"), "^test_\\?", "", "") . ".h", substitute(expand("%:p"), "\\<unittest/.*", "include/**", ""), 1), ".*\\<include/", "", ""), ":p:h"), "[.-]", "_", "g"), "/", "::", "g")`::`!v substitute(substitute(expand("%:t:r"), "^test_\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")`
 * @test ${1}\n
 * <b>输入数据：</b> ${2}\n
 * <b>预期输出：</b> ${3}
 */
BOOST_DATA_TEST_CASE_F(${4:Fixture}, Test${5}, ${6:dataset}, ${7:param})
{
	${0}
}
endsnippet

# Comment for Sscc Test Case
snippet stc1 "unittest for sscc::*" b
/**
 * @class sscc::`!v substitute(substitute(substitute(substitute(expand("%:p:h"), "/unittest\\>", "", ""), "[.-]", "_", "g"), "^.*/\\([^/]\\+\\)$", "\\1", ""), "/", "::", "g")`::`!v substitute(substitute(expand("%:t:r"), "^test_\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")`
 * @test ${1}\n
 * <b>输入数据：</b> ${2}\n
 * <b>预期输出：</b> ${3}
 */
BOOST_FIXTURE_TEST_CASE(Test${4}, Fixture)
{
	${0}
}
endsnippet

# Comment for Sscc Test Case
snippet stc2 "unittest for sscc::*::*" b
/**
 * @class sscc::`!v substitute(substitute(substitute(substitute(expand("%:p:h"), "/unittest\\>", "", ""), "[.-]", "_", "g"), "^.*/\\([^/]\\+/[^/]\\+\\)$", "\\1", ""), "/", "::", "g")`::`!v substitute(substitute(expand("%:t:r"), "^test_\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")`
 * @test ${1}\n
 * <b>输入数据：</b> ${2}\n
 * <b>预期输出：</b> ${3}
 */
BOOST_FIXTURE_TEST_CASE(Test${4}, Fixture)
{
	${0}
}
endsnippet

# Comment for Sscc Test Case
snippet stc3 "unittest for sscc::*::*::*" b
/**
 * @class sscc::`!v substitute(substitute(substitute(substitute(expand("%:p:h"), "/unittest\\>", "", ""), "[.-]", "_", "g"), "^.*/\\([^/]\\+/[^/]\\+/[^/]\\+\\)$", "\\1", ""), "/", "::", "g")`::`!v substitute(substitute(expand("%:t:r"), "^test_\\(.\\)", "\\u\\1", ""),"_\\(.\\)","\\u\\1","g")`
 * @test ${1}\n
 * <b>输入数据：</b> ${2}\n
 * <b>预期输出：</b> ${3}
 */
BOOST_FIXTURE_TEST_CASE(Test${4}, Fixture)
{
	${0}
}
endsnippet

