snippet	cpp "C++ base Makefile" bt
TARGET = ${1:target}

# Listing all sources
SOURCES = $(wildcard *.cpp)

CXXFLAGS = -std=c++11
# depended libraries
LFLAGS = $0

all: $(TARGET)

.PHONY : clean distclean cscope run
clean:
	rm -f $(TARGET) $(SOURCES:.cpp=.o)

distclean:
	rm -f $(TARGET) $(SOURCES:.cpp=.o) $(SOURCES:.cpp=.d)

run: $(TARGET)
	@-./$(TARGET)

# TARGET depends on ".o"s, where every .cpp metioned in SOURCES are substituted into a .o
$(TARGET): $(SOURCES:.cpp=.o)
	$(CXX) -g -o $@ $^ $(LFLAGS)

# Every .d contains the header files which the correspending .cpp depends on
# In gnu make, as of a sub makefile, this rule will automatic checked on the next include command
%.d: %.cpp
	@set -e; rm -f $@; \
	$(CC) -MM $(CXXFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

# Include ".d"s for each .cpp
-include $(SOURCES:.cpp=.d)
endsnippet

snippet	python "Python base Makefile" bt
# If the first argument is "run"...
ifeq (run,$(firstword $(MAKECMDGOALS)))
	# use the rest as arguments for "run"
	RUN_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
endif

all: lint test

%:
	@:

.PHONY: run
run:
	python -m log_analyzer $(RUN_ARGS)

.PHONY: lint
lint:
	flake8

.PHONY: test
test:
	pytest

#.PHONY: release
#release:
#	python setup.py sdist bdist_wheel upload

.PHONY: clean
clean:
	find . -type f -name *.pyc -delete
	find . -type d -name __pycache__ -delete
endsnippet

snippet	python "Python venv based Makefile" bt
# system python interpreter, used to create virtual environment
PY = python3
VENV = venv
BIN = $(VENV)/bin

# make it work on windows too
ifeq ($(OS), Windows_NT)
	BIN = $(VENV)/Scripts
	PY = python
endif

# If the first argument is "run"...
ifeq (run,$(firstword $(MAKECMDGOALS)))
	# use the rest as arguments for "run"
	RUN_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
endif

all: lint test

%:
	@:

$(VENV): requirements.txt requirements-dev.txt
	$(PY) -m venv $(VENV)
	$(BIN)/pip install --upgrade -r requirements.txt
	$(BIN)/pip install --upgrade -r requirements-dev.txt
	#$(BIN)/pip install -e .
	touch $(VENV)

.PHONY: run
run: $(VENV)
	$(BIN)/python -m log_analyzer $(RUN_ARGS)

.PHONY: lint
lint: $(VENV)
	$(BIN)/flake8 --exclude $(VENV)

.PHONY: test
test: $(VENV)
	$(BIN)/pytest

#.PHONY: release
#release: $(VENV)
#	$(BIN)/python setup.py sdist bdist_wheel upload

.PHONY: clean
clean:
	rm -rf $(VENV)
	find . -type f -name *.pyc -delete
	find . -type d -name __pycache__ -delete
endsnippet

snippet go "Go package Makefile" bt
include $(GOROOT)/src/Make.inc

TARG=${1:package}
GOFILES=\
	$1.go\
	$0

include $(GOROOT)/src/Make.pkg
endsnippet

snippet go "Go program Makefile" bt
include $(GOROOT)/src/Make.inc
TARG=${1:program}
GOFILES=\
	$1.go\
	$0

include $(GOROOT)/src/Make.cmd
endsnippet
