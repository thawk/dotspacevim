global !p
import os
import sys
import re
import itertools
from glob import glob

def split_path(relpath):
    return os.path.abspath(relpath).split(os.sep)

def fqn_to_guard(fqn):
    return ('_' + re.sub(r'[.-]', '_', '_'.join(fqn)) + '_').upper()

def fqn_to_namespaces(fqn):
    return '::'.join(fqn[:-1])

def fqn_to_classname(fqn):
    classname = re.sub(
        r'(?:^|_)([^_])',
        lambda m: m.group(1).upper(),
        os.path.splitext(fqn[-1])[0])

    return classname

def fqn_to_full_classname(fqn):
    return '::'.join((fqn_to_namespaces(fqn), fqn_to_classname(fqn)))

def path_to_fqn(relpath, base='', depth=-1):
    if base:
        relpath = os.path.relpath(relpath, base)

    ret = []
    if snip.v.text:
        ret = [v for v in re.split(r'::|/|\\', snip.v.text) if v]

    if not relpath:
        return ret

    paths = [
        x
        for x in os.path.normpath(relpath).split(os.sep)
        if x not in ('src','')]

    start = len(paths) - depth - 1
    if depth <= 0 or start < 0:
        start = 0

    ret += paths[start:]
    return ret

def header_fqn(path, depth=''):
    depth = int(depth) if depth else 0

    abspath = os.path.abspath(path)
    parent = os.path.dirname(abspath)
    while parent:
        if os.path.basename(parent) in ['include', 'lib', 'libs', '3rd']:
            return path_to_fqn(abspath, parent)

        new_parent = os.path.dirname(parent)
        if new_parent == parent:
            break

        parent = new_parent

    return path_to_fqn(abspath, depth=depth)

def find_header(path, filename, recursive=False):
    path = os.path.abspath(path)
    HEADER_EXTS = ('.h', '.hpp', '.hh')

    root_name = os.path.splitext(filename)[0]

    for ext in HEADER_EXTS:
        header = root_name + ext
        pathname = os.path.join(path, '**', header) if recursive else os.path.join(path, header)
        result = glob(pathname, recursive=recursive)
        if result:
            return result

        return []


def rank_file(lpath, rpath):
    def rank(lhs, rhs):
        if len(lhs) == 0:
            return 0

        for i in range(0, len(rhs)):
            if lhs[0] == rhs[i]:
                return max(1+rank(lhs[1:], rhs[i+1:]), rank(lhs[1:], rhs))

        return rank(lhs[1:], rhs)

    lhs = lpath.split(os.sep)
    rhs = rpath.split(os.sep)

    return max(rank(lhs, rhs), rank(rhs, lhs))


def best_match(src_file, headers):
    print(sorted(headers, key=len))
    print(sorted(
        sorted(headers, key=len),
        key=lambda f: rank_file(src_file, f),
        reverse=True))

    return sorted(
        sorted(headers, key=len),
        key=lambda f: rank_file(src_file, f),
        reverse=True)[0]

def source_fqn(src_file, depth=''):
    depth = int(depth) if depth else 0

    src_file = os.path.abspath(src_file)
    parent = os.path.dirname(src_file)
    filename = os.path.basename(src_file)

    headers = find_header(parent, filename)
    if headers:
        return header_fqn(headers[0])

    include_path = ''

    while parent:
        if os.path.basename(parent) in ['lib', 'libs', '3rd']:
            include_path = parent
            break

        for d in ('include', ):
            if os.path.exists(os.path.join(parent, d)):
                include_path = os.path.join(parent, d)
                break

        if include_path:
            break

        new_parent = os.path.dirname(parent)
        if new_parent == parent:
            break

        parent = new_parent

    if include_path:
        headers = find_header(include_path, filename, recursive=True)
        if len(headers) > 0:
            header = best_match(src_file, headers)
            return path_to_fqn(header, include_path, depth=depth)
        elif src_file.startswith(include_path):
            return path_to_fqn(os.path.splitext(src_file)[0] + '.h', include_path, depth=depth)

    return path_to_fqn(os.path.splitext(src_file)[0] + '.h', depth=depth)

def source_include(src_file, depth=-1):
    sqn = source_fqn(src_file, depth)
    if len(sqn) > 1:
        return '<' + '/'.join(sqn) + '>'

    return '"' + '/'.join(sqn) + '"'
endglobal

# Include-Guard，适用于目录层次中有include目录的头文件
# 可以选中额外的namespace（如foo:bar）后再扩展
snippet "header(\d*)" "header for include/*" br
/**
 * @file
 * @brief  `!p snip.rv = fqn_to_classname(header_fqn(path, depth=match.group(1)))`类的声明
 * @author `!v $USER`
 */
#ifndef `!p snip.rv = fqn_to_guard(header_fqn(path, depth=match.group(1)))`
#define `!p snip.rv = fqn_to_guard(header_fqn(path, depth=match.group(1)))`

`!p snip.rv = '\n'.join('namespace ' + n + ' {' for n in header_fqn(path, depth=match.group(1))[:-1])`
/**
 * @brief ${1}
 */
class `!p snip.rv = fqn_to_classname(header_fqn(path, depth=match.group(1)))`
{
public:
    ${0}
};
`!p snip.rv = '\n'.join('}  // namespace ' + n + ' {' for n in header_fqn(path, depth=match.group(1))[:-1])`
#endif  // `!p snip.rv = fqn_to_guard(header_fqn(path, depth=match.group(1)))`
endsnippet

# C++源文件框架，适用于目录层次中有src目录，头文件放在src同层的include下的情况。会自动从include下找到与本文件同名的头文件，按其目录确定最终的名字空间
snippet "src(\d*)" "src for src/*" br
/**
 * @file
 * @brief  `!p snip.rv = fqn_to_classname(source_fqn(path, depth=match.group(1)))`类的定义
 * @author `!v $USER`
 */
#include `!p snip.rv = source_include(path)`

`!p snip.rv = '\n'.join('namespace ' + n + ' {' for n in source_fqn(path, depth=match.group(1))[:-1])`

${0}

`!p snip.rv = '\n'.join('}  // namespace ' + n for n in source_fqn(path, depth=match.group(1))[:-1])`
endsnippet


